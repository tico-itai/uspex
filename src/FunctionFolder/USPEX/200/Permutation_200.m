function Permutation_200(Ind_No)
global POP_STRUC
global ORG_STRUC
global OFF_STRUC
goodMutant = 0;
count = 1;
while goodMutant  ~= 1
count = count + 1;
if count > 50
%disp('failed to do Permutation in 50 attempts, switch to Random');
USPEXmessage(511,'',0);
Random_200(Ind_No);
break;
end
toPerMutate = find(ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
ind = POP_STRUC.ranking(toPerMutate(end));
Surface_numIons  =  POP_STRUC.POPULATION(ind).Surface_numIons;
bulklat =POP_STRUC.POPULATION(ind).Bulk_LATTICE;
bulkcoor=POP_STRUC.POPULATION(ind).Bulk_COORDINATES;
atyp    =POP_STRUC.POPULATION(ind).Bulk_typesAList;
ntyp    =POP_STRUC.POPULATION(ind).Bulk_numIons;
numIons =POP_STRUC.POPULATION(ind).numIons;
Surface_order  =  POP_STRUC.POPULATION(ind).Surface_order;
cell=POP_STRUC.POPULATION(ind).cell;
Surface_LATTICE = POP_STRUC.POPULATION(ind).Surface_LATTICE;
father = POP_STRUC.POPULATION(ind).Surface_COORDINATES;
[PERMUT,noOfSwapsNow] = swapIons_mutation_final(father, Surface_numIons, Surface_order);
if noOfSwapsNow>0
[lat,candidate,numIons,typesAList,chanAList] = makeSurface(Surface_LATTICE, PERMUT,Surface_numIons, bulklat,bulkcoor,atyp,ntyp,ORG_STRUC.vacuumSize(1));
[coor, composition] = getSurface(candidate, numIons, lat);
goodMutant = distanceCheck(coor, lat, composition, ORG_STRUC.minDistMatrice);
end
if goodMutant == 1
info_parents = struct('parent', {},'noOfSwapsNow', {}, 'enthalpy', {});
info_parents(1).parent=num2str(POP_STRUC.POPULATION(ind).Number);
info_parents.noOfSwapsNow=noOfSwapsNow;
info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end)/sum(numIons);
OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;
OFF_STRUC.POPULATION(Ind_No).Surface_LATTICE = Surface_LATTICE;
OFF_STRUC.POPULATION(Ind_No).Surface_COORDINATES = PERMUT;
OFF_STRUC.POPULATION(Ind_No).Surface_numIons = Surface_numIons;
OFF_STRUC.POPULATION(Ind_No).cell = cell;
OFF_STRUC.POPULATION(Ind_No).Bulk_LATTICE=bulklat;
OFF_STRUC.POPULATION(Ind_No).Bulk_COORDINATES=bulkcoor;
OFF_STRUC.POPULATION(Ind_No).Bulk_typesAList=atyp;
OFF_STRUC.POPULATION(Ind_No).Bulk_numIons=ntyp;
OFF_STRUC.POPULATION(Ind_No).numIons = numIons;
OFF_STRUC.POPULATION(Ind_No).LATTICE = lat;
OFF_STRUC.POPULATION(Ind_No).COORDINATES = candidate;
OFF_STRUC.POPULATION(Ind_No).typesAList = typesAList;
OFF_STRUC.POPULATION(Ind_No).chanAList=chanAList;
OFF_STRUC.POPULATION(Ind_No).howCome = 'Permutate';
disp(['Structure ' num2str(Ind_No) '  generated by permutation']);
end
end
